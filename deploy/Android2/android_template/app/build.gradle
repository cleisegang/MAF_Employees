apply plugin: 'com.android.application'

// Only add the support multidex library if the minSdkVersion is less than API 21.
// Android versions API 21+ support multidex natively.
def needsMultiDexLib = (false && 19 < 21)

android {
    compileSdkVersion 23
    buildToolsVersion "25.0.3"
    
    defaultConfig {
        applicationId "com.company.MAF_Employees"
        minSdkVersion 19
        targetSdkVersion 23
        versionCode 1
        versionName ""
        multiDexEnabled false
        
        buildConfigField "boolean", "MULTI_DEX", "false"
        buildConfigField "boolean", "STRICT_MODE", "false"
    }    

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {
        maf {
            def requiredProperties = ['maf_key_store_file','maf_key_store_password','maf_key_alias','maf_key_password']
            def unsetProperties = []
            for (prop in requiredProperties)
            {
                if (!project.hasProperty(prop))
                {
                    unsetProperties += prop
                }
            }
            
            if (unsetProperties.size > 0)
            {
                throw new GradleException("Project must define the following properties: $unsetProperties")
            }
            
            storeFile file(maf_key_store_file)
            storePassword maf_key_store_password
            keyAlias maf_key_alias
            keyPassword maf_key_password
        }
    }
    
    buildTypes {
        release {
            signingConfig signingConfigs.maf
            minifyEnabled false
        }
        debug {
            signingConfig signingConfigs.maf
            minifyEnabled false
        }
        
        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                if (project.hasProperty('maf_output_apk')) {
                    output.outputFile = new File(maf_output_apk)
                }
            }
        }
    }
  
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src'];
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['jniLibs']
            
            if (needsMultiDexLib) {
                java.srcDirs += 'multidex/support'
            }
            else {
                java.srcDirs += 'multidex/none'
            }
            
            if (maf_asset_packaging == 'rt') {
                assets.srcDirs += '../rt_base'
            }

            resources.srcDirs += 'java_res';
            resources.srcDirs += 'build/generated/java_res/maf_assets';

            res.srcDirs += 'C:/JDeveloper/mywork/MAF_Employees/deploy/Android2/app_android_resources'
        }
    }
  
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    
    aaptOptions {
        noCompress '.jar'
    }
}

ext {
    cdvCompileSdkVersion = android.compileSdkVersion
    cdvBuildToolsVersion = android.buildToolsVersion
    cdvVersionCode = Integer.parseInt('' + android.defaultConfig.versionCode)
    cdvMinSdkVersion = "${android.defaultConfig.versionCode}"
    cdvBuildMultipleApks = false
    mafCompileContainerProject = true
}

task applyCordovaGradleProjects {
    doLast {
        // apply Cordova first, so the plugins have access to any helpers that Cordova provides
        apply from: 'cordova/cordova.gradle'

        // Cordova allows plugins to create/modify a build-extras.gradle file, so apply it now if it exists
        File buildExtrasFile = new File(projectDir, 'build-extras.gradle')
        if (buildExtrasFile.exists()) {
            apply from: buildExtrasFile
        }

        Properties props = new Properties()
        File propsFile = new File(projectDir, 'project.properties')
        if (propsFile.exists()) {
            props.load(propsFile.newDataInputStream())
            for (key in props.keys()) { 
                if (key.startsWith('cordova.gradle.include.')) {
                    def value = props.get(key)
                    println 'Applying Cordova gradle plugin from \'' + value + '\''
                    apply from: value
                }
            }
        }
    }
}

dependencies {
    if (needsMultiDexLib) {
        compile 'com.android.support:multidex:1.0.1'
    }
    
    // apply any additional Cordova plug-in projects
    applyCordovaGradleProjects.execute()

    compile fileTree(dir: 'libs', include: ['*.jar'])
    if (mafCompileContainerProject) {
        compile project(':Container')
    }
    compile project(':Cordova')
    compile project(':IDMMobileSDK')


    // compile any additional Cordova plug-in framework dependencies
    Properties props = new Properties()
    File propsFile = new File(projectDir, 'project.properties')
    if (propsFile.exists()) {
        props.load(propsFile.newDataInputStream())
        for (key in props.keys()) { 
            if (key.startsWith('cordova.system.library.')) {
                def value = props.get(key)
                println 'Compiling Cordova plugin gradle library \'' + value + '\''
                compile value
            }
        }
    }
}

task makeJavaResZips {
    doLast {
        task(assetsZip, type: Zip) {
            duplicatesStrategy 'exclude'
            destinationDir new File(projectDir, 'build/generated/java_res/maf_assets')
            archiveName 'assets.zip'
            into ('/') {
                from '../java_res_base/assets'
            }
            into ('/') {
                from zipTree('../java_res_base/assets.zip')
            }
            into ('/') {
                from zipTree('C:/Oracle/Middleware/Oracle_Home_122100/jdeveloper/jdev/extensions/oracle.maf/javascript/ADFmf_AmxJavascript_release.zip')
            }
            into ('/') {
                from zipTree('C:/Oracle/Middleware/Oracle_Home_122100/jdeveloper/jdev/extensions/oracle.maf/javascript/Android/ADFmf_AmxJavascript_release_Android.zip')
            }
            into ('/') {
                from ('C:/JDeveloper/mywork/MAF_Employees/deploy/Android2/app_base_assets')
            }
        }.execute()
        
        task(jvmlibsZip, type: Zip) {
            duplicatesStrategy 'exclude'
            destinationDir new File(projectDir, 'build/generated/java_res/maf_assets')
            archiveName 'jvmlibs.zip'
            into ('/') {
                from zipTree('../java_res_base/jvmlibs.zip')
            }
            if (maf_asset_packaging == 'none') {
                into ('/') {
                    from '../rt_base/storage/jvm'
                }
            }
            into ('/user') {
                from '../java_res_base/user'
            }
            into ('/security') {
                from '../java_res_base/security'
            }
        }.execute()
    }
}

def preBuildTask = tasks["preBuild"]
preBuildTask.dependsOn(makeJavaResZips)
